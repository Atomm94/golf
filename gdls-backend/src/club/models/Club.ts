/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, JoinColumn, Entity, OneToOne, ManyToOne, OneToMany, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';

import { HoleInOne } from '../../hole-in-one/models/HoleInOne';

import * as auth from '../../authorization/auth-checkers';
import { ClubCreateInput } from '../inputs/ClubCreateInput';
import { ClubEditInput } from '../inputs/ClubEditInput';
import { ClubNestedInput } from '../inputs/ClubNestedInput';
import { IRequestContext } from '../../shared/IRequestContext';
import { IAuthorizable } from '../../authorization/IAuthorizable';
import { EntityId, EntityIdScalar } from '../../shared/EntityId';
import { ClubAuth } from '../auth/ClubAuth';
import { getInputOperationType } from '../../shared/get-input-operation-type';
import { noChange } from '../../shared/no-change';
import { asPromise } from '../../shared/as-promise';

import {  } from './update-operations/club-update-operations';

// <keep-imports>
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class Club implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  id: EntityId;

  public authorizationChecker = new ClubAuth(this);

  @Field(() => String, )
  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public name: string;

  @OneToMany(() => HoleInOne, (holeInOne) => holeInOne.club)
  @Field(() => [HoleInOne])
  public holesInOne: Promise<Array<HoleInOne>>;

  @CreateDateColumn()
  @Field()
  createdAt: Date;

  @UpdateDateColumn()
  @Field()
  updatedAt: Date;

  public async update(input: ClubCreateInput | ClubEditInput | ClubNestedInput, context: IRequestContext) {
    const data = input
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    context.modelsToSave.push(this);

    // <keep-update-code>
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
