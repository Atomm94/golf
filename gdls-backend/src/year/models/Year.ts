/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, JoinColumn, Entity, OneToOne, ManyToOne, OneToMany, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';

import { Week } from '../../week/models/Week';

import * as auth from '../../authorization/auth-checkers';
import { YearCreateInput } from '../inputs/YearCreateInput';
import { YearEditInput } from '../inputs/YearEditInput';
import { YearNestedInput } from '../inputs/YearNestedInput';
import { IRequestContext } from '../../shared/IRequestContext';
import { IAuthorizable } from '../../authorization/IAuthorizable';
import { EntityId, EntityIdScalar } from '../../shared/EntityId';
import { YearAuth } from '../auth/YearAuth';
import { getInputOperationType } from '../../shared/get-input-operation-type';
import { noChange } from '../../shared/no-change';
import { asPromise } from '../../shared/as-promise';

import {  } from './update-operations/year-update-operations';

// <keep-imports>
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class Year implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  id: EntityId;

  public authorizationChecker = new YearAuth(this);

  @Field(() => Number, )
  @Column({"type":"integer",
    // <custom-column-args>
    // </custom-column-args>
  })
  public year: number;

  @Field(() => Boolean, )
  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public isActive: boolean;

  @OneToMany(() => Week, (week) => week.year)
  @Field(() => [Week])
  public weeks: Promise<Array<Week>>;

  @CreateDateColumn()
  @Field()
  createdAt: Date;

  @UpdateDateColumn()
  @Field()
  updatedAt: Date;

  public async update(input: YearCreateInput | YearEditInput | YearNestedInput, context: IRequestContext) {
    const data = input
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    context.modelsToSave.push(this);

    // <keep-update-code>
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
