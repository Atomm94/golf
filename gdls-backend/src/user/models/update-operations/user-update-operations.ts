/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { asPromise } from '../../../shared/as-promise';
import { IRequestContext } from '../../../shared/IRequestContext';
import { User } from '../../../user/models/User';
import { FileNestedInput } from '../../../file/inputs/FileNestedInput';
import { File } from '../../../file/models/File';

export async function updateAvatarRelation(user: User, avatar: FileNestedInput | null | undefined, context: IRequestContext) {
  const existingAvatar = await user.avatar;

  if (avatar === null) {
    user.avatar = Promise.resolve(null);
  } else if (avatar === undefined) {
    // do nothing
  } else if (avatar.id) {
    const avatarModel = await context.em.findOneOrFail(File, avatar.id);
    user.avatar = asPromise(await avatarModel.update(avatar, context));
  } else if (existingAvatar) {
    await existingAvatar.update(avatar, context);
  } else {
    user.avatar = asPromise(await new File().update(avatar, context));
  }
}

export async function updateDumbHatPictureRelation(user: User, dumbHatPicture: FileNestedInput | null | undefined, context: IRequestContext) {
  const existingDumbHatPicture = await user.dumbHatPicture;

  if (dumbHatPicture === null) {
    user.dumbHatPicture = Promise.resolve(null);
  } else if (dumbHatPicture === undefined) {
    // do nothing
  } else if (dumbHatPicture.id) {
    const dumbHatPictureModel = await context.em.findOneOrFail(File, dumbHatPicture.id);
    user.dumbHatPicture = asPromise(await dumbHatPictureModel.update(dumbHatPicture, context));
  } else if (existingDumbHatPicture) {
    await existingDumbHatPicture.update(dumbHatPicture, context);
  } else {
    user.dumbHatPicture = asPromise(await new File().update(dumbHatPicture, context));
  }
}

