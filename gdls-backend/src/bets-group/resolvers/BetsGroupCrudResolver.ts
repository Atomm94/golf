/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { Arg, Args, Mutation, Query, Info, ID, Ctx, Resolver, Root, FieldResolver, Int } from 'type-graphql';
import cleanDeep from 'clean-deep';

import { BetsGroup } from '../models/BetsGroup';
import { BetsGroupCreateInput } from '../inputs/BetsGroupCreateInput';
import { BetsGroupEditInput } from '../inputs/BetsGroupEditInput';
import { BetsGroupSearchInput } from '../inputs/BetsGroupSearchInput';
import { BetsGroupSearchOrderInput } from '../inputs/BetsGroupSearchOrderInput';
import { getFindOptions } from '../../shared/get-find-options';
import { EntityId, EntityIdScalar } from '../../shared/EntityId';
import { IRequestContext } from '../../shared/IRequestContext';
import * as auth from '../../authorization/auth-checkers';
import { PaginatedResponse } from '../../shared/PaginationResponse';
import { resolveGetters } from '../../shared/resolve-getters';

// <keep-imports>
// </keep-imports>

const PaginatedBetsGroupResponse = PaginatedResponse(BetsGroup);

@Resolver(BetsGroup)
export class BetsGroupCrudResolver {
  @Query(() => BetsGroup)
  async betsGroup(@Arg('id', () => EntityIdScalar) id: number, @Info() info, @Ctx() ctx: IRequestContext) {
    return await ctx.em.findOneOrFail(BetsGroup, id, getFindOptions(BetsGroup, info));
  }

  @Query(() => PaginatedBetsGroupResponse)
  public async searchBetsGroups(
    @Arg('search', () => BetsGroupSearchInput, { nullable: true }) search: BetsGroupSearchInput | null = null,
    @Arg('skip', () => Int, { nullable: true }) skip = 0,
    @Arg('take', () => Int, { nullable: true }) take = 25,
    @Arg('order', () => [BetsGroupSearchOrderInput], { nullable: true }) order: Array<BetsGroupSearchOrderInput> = [],
    @Info() info,
    @Ctx() ctx: IRequestContext,
  ) {
    const defaultFindOptions = getFindOptions(BetsGroup, info, { transformQueryPath: x => x.replace(/^items./, '') });

    const [items, total] = await ctx.em.findAndCount(BetsGroup, cleanDeep({
      ...defaultFindOptions,
      skip,
      take,
      where: resolveGetters(search),
      order: Object.assign({}, ...order),
    }));

    return {
      items,
      total,
      hasMore: skip + take < total,
    };
  }

  @Query(() => [BetsGroup])
  async betsGroups(@Info() info, @Ctx() ctx: IRequestContext) {
    return await ctx.em.find(BetsGroup, getFindOptions(BetsGroup, info));
  }

  @Mutation(() => BetsGroup)
  async createBetsGroup(@Arg('input') input: BetsGroupCreateInput, @Ctx() ctx: IRequestContext): Promise<BetsGroup> {
    const model = new BetsGroup();
    await model.update(input, ctx);

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => BetsGroup)
  async updateBetsGroup(@Arg('input') input: BetsGroupEditInput, @Ctx() ctx: IRequestContext) {
    const model = await ctx.em.findOneOrFail(BetsGroup, input.id);
    await model.update(input, ctx);

    // <keep-update-code>
    // </keep-update-code>

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => Boolean)
  async deleteBetsGroups(@Arg('ids', () => [ID]) ids: Array<EntityId>, @Ctx() ctx: IRequestContext): Promise<boolean> {
    const entities = await ctx.em.findByIds(BetsGroup, ids);
    await auth.assertCanDelete(entities, ctx);
    await ctx.em.remove(entities);

    return true;
  }

  // <keep-methods>
  // </keep-methods>
}
