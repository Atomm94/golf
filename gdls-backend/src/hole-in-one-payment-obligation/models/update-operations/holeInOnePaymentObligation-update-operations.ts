/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { asPromise } from '../../../shared/as-promise';
import { IRequestContext } from '../../../shared/IRequestContext';
import { HoleInOnePaymentObligation } from '../../../hole-in-one-payment-obligation/models/HoleInOnePaymentObligation';
import { UserNestedInput } from '../../../user/inputs/UserNestedInput';
import { HoleInOneNestedInput } from '../../../hole-in-one/inputs/HoleInOneNestedInput';
import { User } from '../../../user/models/User';
import { HoleInOne } from '../../../hole-in-one/models/HoleInOne';

export async function updateUserWithPaymentObligationRelation(holeInOnePaymentObligation: HoleInOnePaymentObligation, userWithPaymentObligation: UserNestedInput | null | undefined, context: IRequestContext) {
  const existingUserWithPaymentObligation = await holeInOnePaymentObligation.userWithPaymentObligation;

  if (userWithPaymentObligation === null) {
    throw new Error('HoleInOnePaymentObligation.userWithPaymentObligation cannot be null')
  } else if (userWithPaymentObligation === undefined) {
    // do nothing
  } else if (userWithPaymentObligation.id) {
    const userWithPaymentObligationModel = await context.em.findOneOrFail(User, userWithPaymentObligation.id);
    holeInOnePaymentObligation.userWithPaymentObligation = asPromise(await userWithPaymentObligationModel.update(userWithPaymentObligation, context));
  } else if (existingUserWithPaymentObligation) {
    await existingUserWithPaymentObligation.update(userWithPaymentObligation, context);
  } else {
    holeInOnePaymentObligation.userWithPaymentObligation = asPromise(await new User().update(userWithPaymentObligation, context));
  }
}

export async function updateHoleInOneRelation(holeInOnePaymentObligation: HoleInOnePaymentObligation, holeInOne: HoleInOneNestedInput | null | undefined, context: IRequestContext) {
  const existingHoleInOne = await holeInOnePaymentObligation.holeInOne;

  if (holeInOne === null) {
    throw new Error('HoleInOnePaymentObligation.holeInOne cannot be null')
  } else if (holeInOne === undefined) {
    // do nothing
  } else if (holeInOne.id) {
    const holeInOneModel = await context.em.findOneOrFail(HoleInOne, holeInOne.id);
    holeInOnePaymentObligation.holeInOne = asPromise(await holeInOneModel.update(holeInOne, context));
  } else if (existingHoleInOne) {
    await existingHoleInOne.update(holeInOne, context);
  } else {
    holeInOnePaymentObligation.holeInOne = asPromise(await new HoleInOne().update(holeInOne, context));
  }
}

